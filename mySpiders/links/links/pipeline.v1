# -*- coding: utf-8 -*-

# Define your item pipelines here
#
# Don't forget to add your pipeline to the ITEM_PIPELINES setting
# See: http://doc.scrapy.org/en/latest/topics/item-pipeline.html
import json,codecs
import MySQLdb
import MySQLdb.cursors
from hashlib import md5
from twisted.enterprise import adbapi

class LinksPipeline(object):
    # V1.0 json pipeline
    def __init__(self):
        data_file = raw_input("Save the links file as : ").strip()
        self.file = codecs.open(data_file, mode='wb', encoding='utf-8')

    def process_item(self, item, spider):
        line = json.dumps(dict(item)) + '\n'
        self.file.write(line.decode("unicode_escape"))

        return item

class JsonWithEncodingLinksPipeline(object):
    # V2.0 json pipeline
    def __init__(self):
        self.file = codecs.open('info.json', 'w', encoding='utf-8')

    def process_item(self, item, spider):
        line = json.dumps(dict(item), ensure_ascii=False) + '\n'
        self.file.write(line)
        return item

    def spider_closed(self, spider):
        self.file.close()

class MysqlStoreLinksPipeline(object):

    def __init__(self, dbpool):
        self.dbpool = dbpool

    @classmethod
    def from_settings(cls, settings):
        dbargs = dict(
            host=settings['MYSQL_HOST'],
            db=settings['MYSQL_DBNAME'],
            user=settings['MYSQL_USER'],
            passwd=settings['MYSQL_PASSWD'],
            charset='utf8',
            cursorclass=MySQLdb.cursors.DictCursor,
            use_unicode=True,
        )
        dbpool = adbapi.ConnectionPool('MySQLdb', **dbargs)
        return cls(dbpool)

    # pipeline default run
    def process_item(self, item, spider):
        d = self.dbpool.runInteraction(self._do_upinsert, item, spider)
        d.addErrback(self._handle_error, item, spider)
        d.addBoth(lambda _: item)
        return d

    # update each line in DB
    def _do_upinsert(self, conn, item, spider):
        linkmd5 = self._get_linkmd5(item)
        conn.execute('''
            select 1 from links_info where linkmd5 = %s
        ''', (linkmd5,))

        ret = conn.fetchone()
        if ret:
            conn.execute('''
                update links_info set title=%s, link=%s,
                time=%s where linkmd5=%s
            ''', (item['title'], item['link'], item['time']))
        else:
            conn.execute('''
                insert into links_info(linkmd5, title, link,
                time) values (%s, %s, %s, %s)
            ''', (linkmd5, item['title'], item['link'], item['time']))

    def _get_linkmd5(self, item):
        # get url md5 coding
        return md5(item['link']).hexdigest()

    def _handle_error(self, failure, item, spider):
        log.err(failure)